;; set el files load path
(setq load-path (cons (expand-file-name "~/.emacs.d/lisp") load-path))

;; various mode
(require 'llvm-mode)

;; gud-gdb
(global-set-key [f5] 'gud-continue)
(global-set-key [f10] 'gud-next)
(global-set-key [f11] 'gud-step)

;; redo
(require 'redo+)
(global-set-key (kbd "C-x u") 'redo)
(setq undo-no-redo t)

;; Toggle window dedication
(defun toggle-window-dedicated ()
  "Toggle whether the current active window is dedicated or not"
  (interactive)
  (message
   (if (let (window (get-buffer-window (current-buffer)))
	 (set-window-dedicated-p window
				 (not (window-dedicated-p window))))
       "Window '%s' is dedicated"
     "Window '%s' is normal")
   (current-buffer)))

;; reverse window
(defun other-window-reverse ()
  (interactive)
  (other-window -1))

(global-set-key (kbd "C-x .") 'other-window)
(global-set-key (kbd "C-x ,") 'other-window-reverse)

;; cscope
(require 'xcscope)
(cscope-setup)
(setq cscope-option-do-not-update-database t)

;; neotree
(require 'neotree)
(global-set-key [f8] 'neotree-toggle)

(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(custom-face-tag ((t (:inherit custom-variable-tag :foreground "black"))))
 '(diff-added ((t (:foreground "green"))))
 '(diff-context ((t (:weight bold))))
 '(diff-file-header ((t (:background "black" :weight bold))))
 '(diff-header ((t (:background "black"))))
 '(diff-hunk-header ((t (:foreground "cyan"))))
 '(diff-indicator-added ((t (:foreground "green"))))
 '(diff-indicator-removed ((t (:foreground "red"))))
 '(diff-removed ((t (:foreground "red"))))
 '(font-lock-function-name-face ((t (:foreground "cyan"))))
 '(highlight-indentation-face ((t (:inherit fringe :background "brightblack"))))
 '(magit-diff-added-highlight ((t (:foreground "green"))))
 '(magit-diff-context-highlight ((t (:foreground "grey50"))))
 '(magit-diff-removed-highlight ((t (:foreground "red"))))
 '(magit-section-highlight ((t (:background "cyan" :foreground "black"))))
 '(minibuffer-prompt ((t (:foreground "cyan"))))
 '(neo-dir-link-face ((t (:foreground "cyan"))))
 '(neo-file-link-face ((t (:foreground "white"))))
 '(neo-vc-default-face ((t (:foreground "#e5e5e5"))))
 '(tuareg-font-lock-interactive-output-face ((t (:foreground "cyan")))))

;; ein?
(use-package ein
  :ensure t)

;; pakcage management
(require 'package)
;; (add-to-list 'package-archives
;; 	     '("marmalade" . "http://marmalade-repo.org/packages/") t)
(add-to-list 'package-archives
             '("melpa-stable" . "http://stable.melpa.org/packages/") t)
;; (add-to-list 'package-archives
;;              '("melpa-unstable" . "http://melpa.org/packages/") t)
(package-initialize)


;; magit shortcut
(global-set-key (kbd "C-x g") 'magit-status)

;; yaml-mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.ya?ml\\'" . yaml-mode))

;; rainbow-delimiters mode
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)

;; python3
(use-package elpy
  :ensure t
  :config
  (elpy-enable)
  (setq elpy-rpc-python-command "python3")
  (setq elpy-rpc-backend "jedi")
  (or (executable-find "python3")
   (executable-find "/usr/bin/python3")
   (executable-find "/usr/local/bin/python3")
   "python3")
  ;; (setq python-shell-interpreter "ipython")
  ;; (setq python-shell-interpreter-args "--simple-prompt -i")
  (setq python-shell-interpreter "jupyter"
  	python-shell-interpreter-args "console --simple-prompt"
  	python-shell-prompt-detect-failure-warning nil)
  (add-to-list 'python-shell-completion-native-disabled-interpreters
  	       "jupyter")
  (add-hook 'python-mode-hook (lambda ()
				(setq indent-tabs-mode nil))))
 
;; unset key bindings
(global-unset-key (kbd "C-x C-l"))
(global-unset-key (kbd "C-x C-n"))

;;;; ocaml

;; ocp-indent
(add-to-list 'load-path "~/.opam/default/share/emacs/site-lisp")
(require 'ocp-indent)

;; tuareg
(load "~/.opam/default/share/emacs/site-lisp/tuareg-site-file")
(use-package tuareg
  :ensure t
  :hook (tuareg-mode . lsp-deferred))

(add-to-list 'exec-path "~/.opam/default/bin")

;; ocamlformat
(use-package ocamlformat
  :ensure t
  :bind ("<f6>" . ocamlformat)
  :custom (ocamlformat-enable 'enable-outside-detected-project))

;; merlin
(let ((opam-share (ignore-errors (car (process-lines "opam" "var" "share")))))
  (when (and opam-share (file-directory-p opam-share))
    ;; Register Merlin
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    ;; Automatically start it in OCaml buffers
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; Use opam switch to lookup ocamlmerlin binary
    (setq merlin-command 'opam)
    ;; To easily change opam switches within a given Emacs session, you can
    ;; install the minor mode https://github.com/ProofGeneral/opam-switch-mode
    ;; and use one of its "OPSW" menus.
    ))

;;;;

;; tabspaces
;; (require 'tabspaces)
;; (use-package tabspaces
;;   ;; use this next line only if you also use straight, otherwise ignore it. 
;;   ;; :straight (:type git :host github :repo "mclear-tools/tabspaces")
;;   ;; :hook (after-init . tabspaces-mode) ;; use this only if you want the minor-mode loaded at startup. 
;;   :commands (tabspaces-switch-or-create-workspace
;;              tabspaces-open-or-create-project-and-workspace)
;;   :custom
;;   (tabspaces-use-filtered-buffers-as-default t)
;;   (tabspaces-default-tab "Default")
;;   (tabspaces-remove-to-default t)
;;   (tabspaces-include-buffers '("*scratch*"))
;;   (tabspaces-initialize-project-with-todo t)
;;   (tabspaces-todo-file-name "project-todo.org")
;;   ;; sessions
;;   (tabspaces-session t)
;;   (tabspaces-session-auto-restore t)
;;   (tab-bar-new-tab-choice "*scratch*"))

;; tab-bar
(tab-bar-mode 1)
(setq tab-bar-show 1)
(setq tab-bar-close-button-show nil)
(setq tab-bar-tab-hints t)
(setq tab-bar-format '(tab-bar-format-tabs tab-bar-separator))
(global-set-key (kbd "M-{") 'tab-bar-switch-to-prev-tab)
(global-set-key (kbd "M-}") 'tab-bar-switch-to-next-tab)
(global-set-key (kbd "M-t") 'tab-bar-new-tab)
(global-set-key (kbd "M-W") 'tab-bar-close-tab)

;; company-mode
(add-hook 'after-init-hook 'global-company-mode)

;; projectile
(use-package projectile
  :ensure t
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
	      ("s-p" . projectile-command-map) ;; for MacOS
	      ("C-c p" . projectile-command-map) ;; for Windows/Linux
	      ))
(setq projectile-completion-system 'ivy)

;;;; ETC

;; buffer-navigation, find-file extension
;; install counsel
(ivy-mode t)

;; emacs shell mode. previously f8, but now neotree.
(global-set-key [f1] 'shell)

;; show column (row, column) numbers
(column-number-mode 1)

;; Empty and kill redundant buffers on startup
(setq-default message-log-max nil)
(setq initial-scratch-message "")
(setq inhibit-startup-message t) ;; Remove "GNU Emacs" buffer
(kill-buffer "*Messages*")
(kill-buffer "*scratch*")

;; show the name of the command
;; (defun my-echo-command-name-hook ()
;;   (unless (or (eq this-command 'self-insert-command)
;; 	      (eq this-command 'next-line))
;;     (message "%s" this-command)))
;; (add-hook 'post-command-hook 'my-echo-command-name-hook)

;; line number
;; (global-linum-mode 1)

;; time
(display-time)

;; parenthesis
(show-paren-mode 1)

;; show a menu only when running within X (save real estate when in console)
(menu-bar-mode (if window-system 1 -1))

;; show buffer list in current window
(global-set-key (kbd "C-x b") 'buffer-menu)
(global-set-key (kbd "C-x C-b") 'ivy-switch-buffer)

;;;;

;; DO NOT TOUCH BELOW HERE
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(package-selected-packages
   '(counsel projectile magit tabspaces use-package tuareg rainbow-delimiters ocamlformat lsp-mode jedi elpygen elpy ein company-jedi)))
